// <auto-generated />
using System;
using Meeting_Minutes.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingMinutes.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230211235207_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Meeting_Minutes.Models.Item", b =>
                {
                    b.Property<int>("itemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("itemId"));

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("itemId");

                    b.HasIndex("UserId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.ItemStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.HasIndex("itemId");

                    b.ToTable("ItemStatus");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Meeting", b =>
                {
                    b.Property<int>("meetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("meetingID"));

                    b.Property<int>("MeetingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("meetingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("meetingNumber")
                        .HasColumnType("int");

                    b.Property<int>("meetingTypesMeetingTypeId")
                        .HasColumnType("int");

                    b.HasKey("meetingID");

                    b.HasIndex("meetingTypesMeetingTypeId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.MeetingTypes", b =>
                {
                    b.Property<int>("MeetingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MeetingTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingTypeId");

                    b.ToTable("MeetingTypes");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Meetings_Items", b =>
                {
                    b.Property<int>("meetingId")
                        .HasColumnType("int");

                    b.Property<int>("itemId")
                        .HasColumnType("int");

                    b.HasKey("meetingId", "itemId");

                    b.HasIndex("itemId");

                    b.ToTable("Meetings_Items");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Item", b =>
                {
                    b.HasOne("Meeting_Minutes.Models.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.ItemStatus", b =>
                {
                    b.HasOne("Meeting_Minutes.Models.Item", "item")
                        .WithMany("ItemStatus")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("item");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Meeting", b =>
                {
                    b.HasOne("Meeting_Minutes.Models.MeetingTypes", "meetingTypes")
                        .WithMany("Meetings")
                        .HasForeignKey("meetingTypesMeetingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("meetingTypes");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Meetings_Items", b =>
                {
                    b.HasOne("Meeting_Minutes.Models.Item", "Item")
                        .WithMany("Meeting_Item")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Meeting_Minutes.Models.Meeting", "Meeting")
                        .WithMany("Meeting_Item")
                        .HasForeignKey("meetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Item", b =>
                {
                    b.Navigation("ItemStatus");

                    b.Navigation("Meeting_Item");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.Meeting", b =>
                {
                    b.Navigation("Meeting_Item");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.MeetingTypes", b =>
                {
                    b.Navigation("Meetings");
                });

            modelBuilder.Entity("Meeting_Minutes.Models.User", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
